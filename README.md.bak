# SpatialHero: Making LLMs Spatially Aware

An improved implementation of SpatialHero - fine-tuning LLMs to generate better CAD instructions with enhanced spatial reasoning.

## Architecture Improvements

This implementation enhances the original SpatialHero proposal with:

1. **Multi-Modal Reward Signal**: Composite rewards from code validation, geometric verification, and visual quality
2. **Programmatic Verification**: Actual dimensional measurements and topology checks
3. **Error Handling**: Robust pipeline with explicit error recovery
4. **Custom Reward Model**: Scalable evaluation with selective GPT-5-Pro usage
5. **Structured Generation**: Grammar-constrained code generation

## Project Structure

```text
spatialhero/
├── config/              # Configuration files
├── core/                # Core modules
│   ├── code_generator.py    # LLM-based CAD code generation
│   ├── renderer.py           # CADQuery rendering
│   ├── reward_model.py       # Multi-modal evaluation
│   └── verifier.py           # Geometric validation
├── training/            # Training infrastructure
│   ├── ppo_trainer.py        # PPO implementation
│   └── dataset.py            # Dataset management
├── utils/               # Utilities
│   ├── cad_utils.py          # CADQuery helpers
│   └── metrics.py            # Evaluation metrics
├── examples/            # Examples and demos
└── data/                # Training data
```

## Installation

```bash
# Create virtual environment
python -m venv venv
source venv/bin/activate  # On Windows: venv\Scripts\activate

# Install dependencies
pip install -r requirements.txt

# Optional: Install 3D rendering (recommended)
pip install pyvista numpy-stl

# Set up environment variables
cp .env.example .env
# Edit .env with your OpenAI API key
```

### 3D Rendering (Optional but Recommended)

For actual 3D visualization and visual evaluation:

```bash
pip install pyvista numpy-stl
```

Without this, the system uses placeholder rendering (visual quality scores will be neutral).
With PyVista, you get real 3D renders and accurate visual quality assessment.

See [INSTALL_RENDERING.md](INSTALL_RENDERING.md) for details.

## Quick Start

```python
from core.code_generator import CodeGenerator
from core.renderer import CADRenderer
from core.reward_model import RewardModel

# Generate CAD code
generator = CodeGenerator()
code = generator.generate("Create a simple chair")

# Render and evaluate
renderer = CADRenderer()
images = renderer.render(code)

reward_model = RewardModel()
reward = reward_model.evaluate(code, images)
```

## Training

```bash
# Train the model
python examples/train.py --config config/config.yaml

# Evaluate
python examples/evaluate.py --checkpoint outputs/checkpoints/best_model.pt
```

## License

MIT License
